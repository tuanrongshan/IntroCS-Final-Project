class Game {

    static int childH, childW;
    // field Array normalStairs;
    field NormalStair s0, s1, s2, s3, s4, s5;
    field HP hp;
    field Player player;
    field char key;
    field boolean exit;
    field int score;
    field int tick;
    field int invulnerability;
        /*
        duration: 10 ticks
        An invincibility or immunity to damage that occurs after the player takes damage for a short time, indicated by the player-character blinking or buffering.
        */

    function void init() {
        let childH = 23;
        let childW = 20;
        do NormalStair.init(3);
        do Player.init();
        return;
    }

    constructor Game new() {
        var int h;
        var int i;
        // let normalStairs = Array.new(5);
        // let h = 213;
        let h = 55;
        let i = 0;

        let exit = 0;
        let score = 0;
        let tick = 0;
        let invulnerability = 0;

        let player = Player.new(160, h-childH); //x: multiple of 16
        let hp = HP.new(312, 60, 16, 20);

        do map.draw();

        // while (i < 5) {
        //     do LCGRandom.setSeed(h*(i+10));
        //     let normalStairs[i] = NormalStair.new(h);
        //     let h = h - LCGRandom.randRange(40, 55);
        //     let i = i + 1;
        // }

        do LCGRandom.setSeed(h*(i+10));
        let s0 = NormalStair.first(h);
        let s1 = NormalStair.new(h+46);
        let s2 = NormalStair.new(h+92);
        let s3 = NormalStair.new(h+138);
        let s4 = NormalStair.new(h+184);
        let s5 = NormalStair.new(h+230);

        return this;
    }

    method void dispose() {
        var int i;

        do player.dispose();
        do hp.dispose();
        // let i = 0;
        // while (i < 5) {
        //     do normalStairs.dispose();
        //     let i = i + 1;
        // }
        do s0.dispose();
        do s1.dispose();
        do s2.dispose();
        do s3.dispose();
        do s4.dispose();
        do s5.dispose();
        do Memory.deAlloc(this);
        return;
    }

    // Input from Keyboard
    method void keyboardInput() {
        let key = Keyboard.keyPressed();
        if ((tick = 0) & (key = 0)) {return;}
        if (tick = 5){let tick = 0;}
        if (tick = 0){
            // Left Arrow
            if (key = 130) {
                do player.left();
            }

            // Right Arrow
            if (key = 132) {
                do player.right();
            }
        }
        let tick = tick+1;
        return;
    }

    method void refresh() {
        var int xl, xr, yd;
        var int uplift;
        var int Dspikeabove;
        var boolean standon;
        let Dspikeabove = 0;
        let uplift = 0;
        let xl = player.x();
        let xr = player.x()+childW-1;
        let yd = player.y()+childH-1;
        let standon = ((s0.stand_on(xl, xr, yd)>0) | (s1.stand_on(xl, xr, yd)>0) | (s2.stand_on(xl, xr, yd)>0) | (s3.stand_on(xl, xr, yd)>0) 
        | (s4.stand_on(xl, xr, yd)>0) | (s5.stand_on(xl, xr, yd)>0));
        let uplift = uplift + s0.update(xl, xr, yd);
        let uplift = uplift + s1.update(xl, xr, yd);
        let uplift = uplift + s2.update(xl, xr, yd);
        let uplift = uplift + s3.update(xl, xr, yd);
        let uplift = uplift + s4.update(xl, xr, yd);
        let uplift = uplift + s5.update(xl, xr, yd);
        if (~(player.update(standon))){
            do hp.injure(30);
        }
        // do player.rise(uplift);
        let Dspikeabove = 5*player.rise(uplift);
        if ((Dspikeabove>0) & (invulnerability = 0)){
            do hp.injure(5*player.rise(uplift));
            let invulnerability = 10;
        }
        if (invulnerability > 0){let invulnerability = invulnerability-1;}
        // do Output.println();
        // do Output.printInt(uplift);
        // if (standon) {do Output.printString("T");}
        // if (~standon) {do Output.printString("F");}
        let exit = ~hp.live();
        do map.draw();
        return;
    }

    method void run() {
        while (~exit) {
            do keyboardInput();
            do refresh();
            do Sys.wait(7);
        }
        return;
    }
}